HW_Client_Server

1) Прочиать про клиент-серверную архитектуру

"Клиент-сервер" (англ. client–server) — вычислительная или сетевая архитектура, в которой задания или сетевая нагрузка распределены между поставщиками услуг, 
называемыми серверами, и заказчиками услуг, называемыми клиентами. 
Фактически клиент и сервер — это программное обеспечение.



2) Что такое HTTP и HTTPS

HTTP (с англ. HyperText Transfer Protocol – протокол передачи гипертекста) – это прикладной протокол передачи данных в сети. 

Теперь его используют для получения информации с веб-сайтов. 
Протокол HTTP основан на использовании технологии клиент-сервер: клиент, отправляющий запрос, 
является инициатором соединения; сервер, получающий запрос, выполняет его и отправляет клиенту результат.

HTTPS (с англ. HyperText Transfer Protocol Secure – безопасный протокол передачи гипертекста) 
– это расширение протокола HTTP, поддерживающего шифрование с помощью криптографических протоколов SSL и TLS.

	Чем отличаются HTTP от HTTPS

-- HTTPS не является отдельным протоколом передачи данных, а представляет собой расширение протокола HTTP с надстройкой шифрования;
-- передаваемые по протоколу HTTP данные не защищены, HTTPS обеспечивает конфиденциальность информации путем ее шифрования;
-- HTTP использует порт 80, HTTPS — порт 443.

	Что такое SSL и что такое TLS?

SSL — Secure Socket Layer, уровень защищенных сокетов. 
TLS — Transport Layer Security, безопасность транспортного уровня. 
SSL является более ранней системой, TLS появился позднее и он основан на спецификации SSL 3.0, разработанной компанией Netscape Communications. 
Тем не менее, задача у этих протоколов одна — обеспечение защищенной передачи данных между двумя компьютерами в сети Интернет.

	Безопасность
При использовании SSL/TLS одним из основных методов является метод MITM (Man In The Middle), «человек посередине». 
Этот метод основывается на использовании серверного сертификата и ключа на каком-то узле, 
который будет прослушивать трафик и расшифровывать информацию, которой обмениваются сервер и клиент.


3) HTTP методы

	Методы HTTP запроса

HTTP определяет множество методов запроса, которые указывают, какое желаемое действие выполнится для данного ресурса. 
Несмотря на то, что их названия могут быть существительными, эти методы запроса иногда называются HTTP глаголами. 
Каждый реализует свою семантику, но каждая группа команд разделяет общие свойства: так, 
методы могут быть безопасными, идемпотентными или кешируемыми.

GET
Метод GET запрашивает представление ресурса. 
Запросы с использованием этого метода могут только извлекать данные.

POST
POST используется для отправки сущностей к определённому ресурсу. 
Часто вызывает изменение состояния или какие-то побочные эффекты на сервере.

HEAD
HEAD запрашивает ресурс так же, как и метод GET, но без тела ответа.

PUT
PUT заменяет все текущие представления ресурса данными запроса.

DELETE
DELETE удаляет указанный ресурс.

CONNECT
CONNECT устанавливает "туннель" к серверу, определённому по ресурсу.

OPTIONS
OPTIONS используется для описания параметров соединения с ресурсом.

TRACE
TRACE выполняет вызов возвращаемого тестового сообщения с ресурса.

PATCH
PATCH используется для частичного изменения ресурса.


4) HTTP статус коды сервера
	Коды ответа HTTP
Код ответа (состояния) HTTP показывает, был ли успешно выполнен определённый HTTP запрос. 

Коды сгруппированы в 5 классов:
1) Информационные 100 - 199
2) Успешные 200 - 299
3) Перенаправления 300 - 399
4) Клиентские ошибки 400 - 499
5) Серверные ошибки 500 - 599
 

Если вы получили код ответа (состояния), которого нет в данном списке, 
в таком случае он является не стандартизированным кодом ответа (состояния), 
вероятней всего он кастомный сервера.


5) Что такое ядро браузера
	
	Ядро - это программа или модуль, который отображает контент на основе языка разметки.

	Браузерный движок или ядро браузера (англ. layout engine) — представляет собой программу, преобразующую содержимое веб-страниц (файлы HTML, XML, цифровые изображения и т. д.) 
	и информацию о форматировании (в форматах CSS, XSL и т. д.) в интерактивное изображение форматированного содержимого на экране. 
	Браузерный движок обычно используется в веб-браузерах (отсюда название), почтовых клиентах и других программах, 
	нуждающихся в отображении и редактировании содержимого веб-страниц.

Ядро браузера можно разделить на две части: движок рендеринга (инженер макета или движок рендеринга) и движок JS.
Механизм рендеринга. Он отвечает за получение содержимого веб-страницы (HTML, XML, изображения и т. д.), 
организацию информации (например, добавление CSS и т. д.) и вычисление режима отображения веб-страницы, а затем вывод на монитор или принтер. 
Разница в ядре браузера будет по-разному интерпретировать синтаксис веб-страницы, поэтому эффект рендеринга также будет другим.
Механизм JS анализирует язык Javascript и выполняет язык Javascript для достижения динамического эффекта веб-страницы.

Сначала не было четкого различия между движком рендеринга и движком JS, а позже движок JS становился все более и более независимым, 
и ядро ​​ссылалось только на движок рендеринга. Команда проекта веб-стандартов создала ACID для проверки совместимости и производительности движка. 
Существует много типов ядер, таких как добавление некоммерческих бесплатных ядер, которые никто не использует, может быть более 10 видов, 
но общие ядра браузера можно разделить на четыре типа: Trident, Gecko, Blink, Webkit.


6) Какие браузеры какиие ядра используют

	1) Blink: Google
	2) Gecko: Mozilla
	3) WebKit: Apple
	4) EdgeHTML: Microsoft



	Blink — движок браузера Chromium, браузера Google Chrome с 28 версии, Microsoft Edge с 79 версии, Opera c 15 версии и Vivaldi. Он является ответвлением WebKit.
	
	Gecko — открытый движок проекта Mozilla; используется в большом числе программ, основанных на коде Mozilla (браузере Firefox, почтовом клиенте Thunderbird, наборе программ SeaMonkey).
	
	WebKit — движок для браузера Apple Safari, включенного в операционную систему Mac OS X, и браузера Google Chrome (до 2013 года). Встроен в библиотеку Qt (Начиная с Qt 5.6 признан устаревшим).
	
	EdgeHTML — проприетарный браузерный движок от компании Microsoft. Ответвление Microsoft Trident с удалением устаревшего кода и заменой его на более современный.

	Trident или MSHTML — ядро отображения страниц (layout engine) для Windows-версии Microsoft Internet Explorer.	
	
	KHTML — разработан в рамках проекта KDE, используется в браузере Konqueror и послужил основой для WebKit.


7) Что такое API
	
	API (Application Programming Interface — программный интерфейс приложения, или интерфейс программирования приложений)
	специальный протокол для взаимодействия компьютерных программ, который позволяет использовать функции одного приложения внутри другого.

 
Простими словами это контракт, который предоставляет программа. «Ко мне можно обращаться так и так, я обязуюсь делать то и это».

API – это механизмы, которые позволяют двум программным компонентам взаимодействовать друг с другом, используя набор определений и протоколов. 
Например, система ПО метеослужбы содержит ежедневные данные о погоде. 
Приложение погоды на телефоне «общается» с этой системой через API и показывает ежедневные обновления погоды на телефоне.

	Что значит API?
API – Application Programming Interface, что значит программный интерфейс приложения. 
В контексте API слово «приложение» относится к любому ПО с определенной функцией. 
Интерфейс можно рассматривать как сервисный контракт между двумя приложениями. 
Этот контракт определяет, как они взаимодействуют друг с другом, используя запросы и ответы. 
Документация API содержит информацию о том, как разработчики должны структурировать эти запросы и ответы.

	Как работают API?

Существует четыре различных способа работы API в зависимости от того, когда и почему они были созданы.
	
	SOAP API 
SOAP – Simple Object Access Protocol, т. е. простой протокол доступа к объектам. 
Клиент и сервер обмениваются сообщениями посредством XML. 
Это менее гибкий API, который был более популярен в прошлом.

	RPC API
Такие API называются системой удаленного вызова процедур. 
Клиент выполняет функцию (или процедуру) на сервере, и сервер отправляет результат обратно клиенту.

	Websocket API
Websocket API – это еще одна современная разработка web API, которая использует объекты JSON для передачи данных. 
WebSocket API поддерживает двустороннюю связь между клиентскими приложениями и сервером. 
Сервер может отправлять сообщения обратного вызова подключенным клиентам, что делает его более эффективным, чем REST API.

	REST API
На сегодняшний день это самые популярные и гибкие API-интерфейсы в Интернете. 
Клиент отправляет запросы на сервер в виде данных. 
Сервер использует этот клиентский ввод для запуска внутренних функций и возвращает выходные данные обратно клиенту.

	Что такое REST API?
REST – это Representational State Transfer, т. е. передача репрезентативного состояния. 
REST определяет набор функций, таких как GET, PUT, DELETE и т. д., которые клиенты могут использовать для доступа к данным сервера. 
Клиенты и серверы обмениваются данными по протоколу HTTP.

Главной особенностью REST API является то, что такая передача выполняется без сохранения состояния. 
Без сохранения состояния означает, что серверы не сохраняют клиентские данные между запросами. 
Клиентские запросы к серверу аналогичны URL-адресам, которые вы вводите в браузере для посещения веб-сайта. 
Ответ от сервера представляет собой простые данные без типичного графического отображения веб-страницы.

	

	Каковы преимущества REST API?
REST API имеет четыре главных преимущества.

	1. Интеграция 
API используются для интеграции новых приложений с существующими программными системами. 
Это увеличивает скорость разработки, потому что каждую функцию не нужно писать с нуля. 
API можно использовать для усиления существующего кода.
	2. Инновации 
Целые отрасли могут измениться с появлением нового приложения. 
Организации должны быстро реагировать и поддерживать быстрое развертывание инновационных услуг. 
Они могут сделать это, внося изменения на уровне API без необходимости переписывать весь код.
	3. Расширение
API-интерфейсы предоставляют компаниям уникальную возможность удовлетворять потребности своих клиентов на разных платформах. 
Например, карты API позволяет интегрировать информацию о картах через веб-сайты, Android, iOS и т. д. 
Любая компания может предоставить аналогичный доступ к своим внутренним базам данных, используя бесплатные или платные API.
	4. Простота обслуживания
API действует как шлюз между двумя системами. 
Каждая система обязана вносить внутренние изменения, чтобы это не повлияло на API. 
Таким образом, любые будущие изменения кода одной стороной не повлияют на другую сторону.

	Какие типы API существую?

	Частные API
Это внутренние API организаций, которые используются только для соединения систем и данных внутри бизнеса.
	
	Общедоступные API 
Это API с общим доступом и могут быть использованы кем угодно. С этими типами API может быть (но не обязательно) сопряжена некоторая авторизация и стоимость.
	
	Партнерские API 
Эти API доступны только авторизованным сторонним разработчикам для содействия партнерским отношениям между предприятиями.
	
	Составные API 
Эти API объединяют два или более разных API для решения сложных системных требований или поведения. 



8) Что такое ендпоинты (Endpoint)

	Endpoint (в переводе с англ. — конечная точка) представляет собой некий шлюз, который соединяет серверные процессы приложения с внешним интерфейсом. 
	Простыми словами, это адрес, на который отправляются сообщения. 
	Чтобы понять, что такое эндпоинты, важно упомянуть работу API.



9) URL (URI, URL, URN)

	
	URI (Uniform Resource Identifier) - это строка символов, которая используется для иднетификации какого-либо ресураса по его адрусу или по его названию,
	либо по тому и тому вместе.

	URL (Unifrom Resource Locator) - это строка символов, которая используется для идентификации какого-либо ресурса на сервере, но только по его адресу,
	по го местоположению.

	URN (Uniform Resource Name) - является уникальным именем объекта.

10) Идемпотентные HTTP методы

	Метод HTTP является идемпотентным, если повторный идентичный запрос, 
	сделанный один или несколько раз подряд, имеет один и тот же эффект, не изменяющий состояние сервера. 

	Другими словами, идемпотентный метод не должен иметь никаких побочных эффектов (side-effects), кроме сбора статистики или подобных операций.
	Корректно реализованные методы GET, HEAD, PUT и DELETE идемпотентны, но не метод POST. Также все безопасные методы являются идемпотентными.

	Метод считается «идемпотентным», если эффект на сервер от одного запроса такой же как от нескольких идентичных запросов такого типа. 
	Из методов запроса, определенных в этой спецификации, PUT, DELETE и безопасные методы (не изменяют состояние сервера) запросов являются идемпотентными.

	Другими словами если многократное повторение одних и тех же запросов возвращает одинаковые результаты, то метод считается идемпотентным.


11) Безопасные HTTP методы
	
	Метод HTTP является безопасным, если он не меняет состояние сервера. 

	Другими словами, безопасный метод проводит операции "только чтение" (read-only). 
	Несколько следующих методов HTTP безопасные: GET, HEAD или OPTIONS. 
	Все безопасные методы являются также идемпотентными, как и некоторые другие,
	но при этом небезопасные, такие как PUT или DELETE.




12) Иденфикация, Аутентификация, Авторизация

	Идентификация — процесс распознавания пользователя по его идентификатору. 

	Аутентификация — процедура проверки подлинности, доказательство что пользователь именно тот, за кого себя выдает. 

	Авторизация — предоставление определённых прав.



13) Что такое IP
	
	IP (Internet Protocol)- адрес – это уникальный идентификатор сетевого узла в публичной или частной компьютерной сети, 
	которая построена на базе стека протоколов TCP/IP. 
	Это адрес компьютера, сервера или ещё какого-нибудь сетевого оборудования. 
	Служит для того, чтобы упорядочить устройства в сети.
	IP (Internet Protocol Addres)

	Что такое TCP/IP 

	Стек протоколов TCP/IP (Transmission Control Protocol/Internet Protocol, протокол управления передачей/протокол интернета) — 
	сетевая модель, описывающая процесс передачи цифровых данных. 
	Она названа по двум главным протоколам, по этой модели построена глобальная сеть — интернет.


	IPv4

	В 4-й версии IP-адрес представляет собой 32-битное число. 
	Как правило, адрес записывается в виде четырёх десятичных чисел значением от 0 до 255 
	(эквиваленты четырём восьмибитным числам), разделённых точками, например, 192.168.0.3.


	IPv6

	В 6-й версии IP-адрес является 128-битным. 
	Как правило, адрес записывается в виде восьми четырёхзначных шестнадцатеричных чисел (эквивалентны восьми 16-битным числам), 
	разделённых двоеточиями, например, 2001:0db8:85a3:0000:0000:8a2e:0370:7334. Ведущие нули допускается в записи опускать. 
	Нулевые группы, идущие подряд, могут быть опущены, вместо них ставится двойное двоеточие (fe80:0:0:0:0:0:0:1 можно записать как fe80::1). 
	Более одного такого пропуска в адресе не допускается.
	
14) Что такое октет в DNS
	
	Domain Name System
	
	DNS (система доменных имен) преобразует доменные имена, удобные для человеческого восприятия (например, www.amazon.com), 
	в IP-адреса, понимаемые машиной (например, 192.0.2.44)
	
	DNS (англ. Domain Name System «система доменных имён») — компьютерная распределённая система для получения информации о доменах. 
	Чаще всего используется для получения IP-адреса по имени хоста (компьютера или устройства), 
	получения информации о маршрутизации почты и/или обслуживающих узлах для протоколов в домене.
	
	Простимы словами это удобное название для человека доменное имя вместе ip (цифр) который человек плохо запоминает.

	Октет - восемь двоичных разрядов. Октет - байт.
	В русском языке октет обычно называют байтом.
	Октет всегда равен 8 битам!
	


15) Что такое порт, сколько портов у Linux сервера
	
	Порт (англ. port) — целое неотрицательное число, записываемое в заголовках протоколов транспортного уровня сетевой модели OSI (TCP, UDP, SCTP, DCCP).
	Сетевой порт — идентифицируемый номером системный ресурс, выделяемый приложению, выполняемому на некотором сетевом хосте, 
	для связи с приложениями, выполняемыми на других сетевых хостах (в том числе c другими приложениями на этом же хосте)

	Для каждого из протоколов TCP и UDP стандарт определяет возможность одновременного выделения на хосте до 65536 уникальных портов, 
	идентифицирующихся номерами от 0 до 65535. При передаче по сети номер порта в заголовке пакета используется 
	(вместе с IP-адресом хоста) для адресации конкретного приложения (и конкретного, принадлежащего ему, сетевого соединения).

	В обычной клиент-серверной модели приложение либо ожидает входящие данные (или запроса на соединение; «слушает порт»; роль сервера), 
	либо посылает данные (или запрос на соединение) на известный порт, открытый приложением-сервером (роль клиента).

	По умолчанию приложению выдается порт с произвольным (например, ближайшим свободным, большим 1023) номером. 
	При необходимости приложение может запросить конкретный (предопределённый) номер порта. 
	Так, веб-серверы обычно открывают для ожидания соединения предопределённый порт 80 протокола TCP.

	Порты TCP не пересекаются с портами UDP. То есть, порт 1234 протокола TCP не будет мешать обмену по UDP через порт 1234.
	
	TCP (Transmission Control Protocol) (TCP, протокол управления передачей) — один из основных протоколов передачи данных интернета. 
	Предназначен для управления передачей данных интернета.

	UDP (англ. User Datagram Protocol — протокол пользовательских датаграмм) — один из ключевых элементов набора сетевых протоколов для Интернета.
	
	Если говорить совсем простим языком , в TCP не теряются пакеты, а в UDP может немного потерятся пакеты но не кретично.
	

	Диапазон номеров портов:          Группа портов:
	От 0 до 1023 			  Общеизвестные
	1024-49151			  Зарегистрированые
	49152-65535			  Частные или динамачиские порты	

        В отличие от HTTP с TCP-портом 80, для HTTPS по умолчанию используется TCP-порт 443.
	HTTP - 80
	HTTPS - 443
	

16) Уровни OSI

	OSI ( The Open Systems Interconnection model)
	
	В модели OSI средства взаимодействия делятся на семь уровней: 
	прикладной, представления, сеансовый, транспортный, сетевой, канальный и физический.

	Посредством данной модели различные сетевые устройства могу взаимодействовать друг с другом:

	        OSI MODEL:						TCP/IP MODEL:
	
	7. (Apllication layer)         HTTPS,HTTP,FTP,Telnet         (Apllication layer) (5-7)
	   Прикладной уровень          NTP, PING, DHCP,DNS           ^                     ^
	^                                                            |                     |                                                
	|                                                            (Transport layer)    (4)                                                          
	                                                             ^                     ^
	6. (Presentation layer)        JPEG,Кодирование,сжатие       |                     |                                                                       
	   (Уровень представление)     RPC, PAP, SSL, TLS            (Network layer)      (3)     
	^                                                            ^                     ^                        
	|                                                            |                     |
	5. (Session layer)              Пакеты, кодек                (Network Interface) (1-2)
	   (Сеансовый уровень)                                       (Network Access layer)
	^
	|
	4. (Transport layer)            TCP/UDP
	   (Транспортный уровень)
	^
	|  
	3. (Network layer)              IP
	   (Сетевой уровнь)             IPv4, IPv6
	^
	|
	2. (Data link layer)            Frame, Ethernet,
	   (Канальный уровень)          MPLS, CDP, PPP, MAC
	^
	|
	1. (Physical layer)             Ethernet, Биты,
	   (Физический уровень)         Кабель

 

	
	 ↑ - Декапсуляция данных 
	
	 ↓ - Инкапсуляция данных
	
	Процес когда данные передаются с верхних уровней на нижный називается : Инкапсуляция данных. ↓
	А когда наоборот с нижных на верхных називается: Декапсуляция данных. ↑
	
	Если грубо разделить, можно поделаит на: 1-4 (Сетевой инженер) , 5-7 (Разработчик софта).
	
	


17) Хедеры http запросов ( Хедеры - Заголовки) 

	Заголовки HTTP (англ. HTTP Headers) — это строки в HTTP-сообщении, содержащие разделённую двоеточием пару имя-значение. 
	Формат заголовков соответствует общему формату заголовков текстовых сетевых сообщений ARPA.
	Заголовки должны отделяться от тела сообщения хотя бы одной пустой строкой.

	Все заголовки разделяются на четыре основных группы:
	1. General Headers (рус. Основные заголовки) — должны включаться в любое сообщение клиента и сервера.
	2. Request Headers (рус. Заголовки запроса) — используются только в запросах клиента.
	3. Response Headers (рус. Заголовки ответа) — только для ответов от сервера.
	4. Entity Headers (рус. Заголовки сущности) — сопровождают каждую сущность сообщения.
